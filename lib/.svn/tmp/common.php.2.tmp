<?php

header( "Expires: Mon, 20 Dec 1998 01:00:00 GMT" );
header( "Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT" );
header( "Cache-Control: no-cache, must-revalidate" );
header( "Pragma: no-cache" );

error_reporting(E_ERROR);

set_exception_handler('exception_handler');
set_error_handler('error_handler');

define('APP_HOME', preg_replace('|/public/.*\.php|', '/', $_SERVER['SCRIPT_FILENAME']));

# See if authentication is required
if(Config::get('authentication:required')){
	Session::validate();
}

/*##########################################################################*//**
 * Handles uncaught errors
 * @param Exception $objError
 * @return true;
 */
function error_handler(  $intError, $chrError ) {


	switch ($intError) {
       
		
		case E_STRICT;
		case E_NOTICE;
			# Ignore strict errors
		break;
    
        default:

        	$objError = new Error($chrError, Error::FATAL);
	}
	
	return true;

} # end method

/*##########################################################################*//**
 * Uses javascript to change the page location
 * @param $chrURL
 * @return true
 */
function location( $chrURL ) {

	#$chrURL = urlencode($chrURL);
	echo "<script language=\"javascript\"> document.location.href = '$chrURL'; </script>\n";
	flush();	
	return true;

}

/*##########################################################################*//**
 * Handles uncaught exceptions
 * @param Exception $objError
 * @return true;
 */
function exception_handler( Exception $objException ) {

	$objError = new Error($objException, Error::FATAL);
	return true;

} # end method

/*#############################################################################
        javascript
##########################################################################*//**
 * Return code encapsulated in JS script tags
 * @param string $chrCode
 * @return chrJavascript
 */
function javascript($chrCode) {

        echo "
        <script type=\"text/javascript\">
                $chrCode
        </script>";
        flush();

} # end function


/*##########################################################################*//**
* Automatically load any classes that haven't been included
* @access public
*/
function __autoload($chrClass) {
	
	$chrClass = strtolower($chrClass);
	require_once("../lib/{$chrClass}class.php");
	
}

/*##########################################################################*//**
* Displays a javascript alert message
* @access public
*/
function alert($chrText){
	
	$chrText = str_replace("'", '\'', $chrText);
	echo "<script language=\"javascript\">alert('$chrText');</script>\n";
	flush();
	
}

/*##########################################################################*//**
* @return 
* @access public
* @desc Displays a formatted date
* @author paul.maddox
*/
function format_short_date($dtDate){
	 return(strtoupper(date("d-M-Y H:i:s", $dtDate)));	
} // End function;


/*#############################################################################
	formatFilesize : Formats a filesize to human readable format
##########################################################################*//**
* @return 
* @access public
* @desc Formats a filesize to human readable format
* @author paul.maddox
*/
function format_filesize($bytes){

   if ($bytes >= 1099511627776) {
       $return = round($bytes / 1024 / 1024 / 1024 / 1024, 2);
       $suffix = "TB";
   } elseif ($bytes >= 1073741824) {
       $return = round($bytes / 1024 / 1024 / 1024, 2);
       $suffix = "GB";
   } elseif ($bytes >= 1048576) {
       $return = round($bytes / 1024 / 1024, 2);
       $suffix = "MB";
   } elseif ($bytes >= 1024) {
       $return = round($bytes / 1024, 2);
       $suffix = "KB";
   } else {
       $return = $bytes;
       $suffix = "B";
   } // End If
   
   $return .= $suffix;

   return $return;
  
} // End function;

/*#############################################################################
        display : Dumps the contents of an array/object/variable
##########################################################################*//**
* @return 
* @access public
* @desc Dumps the contents of an array/object/variable
* @author paul.maddox
*/
function display($objObject){
	
	echo "
	<pre>" . print_r($objObject, true) . "</pre>
	";
	
	flush();
	
} // End Function


/*#######m#####################################################################
	function tidy()
##########################################################################*//**
 * @return $objTidy (just echo it)
 * @param $chrHTML
 * @desc Tidies your HTML for you, of course.
*/
function tidy(&$chrHTML, $blnShowErrors=false, $config=array(
	'indent' => TRUE,
	'output-xhtml' => TRUE,
	'wrap' => 200,
), $chrEncoding = 'ascii') {
	
	return($chrHTML);
	//$objTidy = tidy_parse_string($chrHTML, $config, 'UTF8');
	$objTidy = tidy_parse_string($chrHTML, $config, $chrEncoding);
	if ( method_exists( $objTidy, "cleanRepair" ) ) {
		$objTidy->cleanRepair();
		if ($objTidy->errorBuffer && defined('DEVELOPER') && $blnShowErrors) {
			display("The following errors were detected:\n".htmlspecialchars($objTidy->errorBuffer));
		} # end function
		return $objTidy->value;
	} else {
		if ( defined( 'DEVELOPER' ) ) {
			display( "cleanRepair() method missing from tidy object" );
		}
		$chrHTML = "<!-- tidy method cleanRepair missing. -->" . $chrHTML;
		return( $chrHTML );
	}
} # end function

function encode($chrText){
	return base64_encode(serialize($chrText));
} // End functoin

function decode($chrText){
	return unserialize(base64_decode($chrText));
} // End functoin


if(!function_exists('get_called_class')) {
function get_called_class() {
    $bt = debug_backtrace();
    $l = 0;
    do {
        $l++;
        $lines = file($bt[$l]['file']);
        $callerLine = $lines[$bt[$l]['line']-1];
        preg_match('/([a-zA-Z0-9\_]+)::'.$bt[$l]['function'].'/',
                   $callerLine,
                   $matches);
                   
       if ($matches[1] == 'self') {
               $line = $bt[$l]['line']-1;
               while ($line > 0 && strpos($lines[$line], 'class') === false) {
                   $line--;                   
               }
               preg_match('/class[\s]+(.+?)[\s]+/si', $lines[$line], $matches);
       }
    }
    while ($matches[1] == 'parent'  && $matches[1]);
    return $matches[1];
  }
}

function array_searchi($str,$array){ 
    $found=array(); 
    foreach($array as $k=>$v){ 
    	
    	
        if(strtolower($v)==strtolower($str)){ 
            $found[]=$v; 
        } 
    } 
    $f=count($found); 
    if($f===0)return false;elseif($f===1)return $found[0];else return $found; 
} 


