<?php
/**
 * This class allows a list of contacts to be built up and searched
 *
 * @package ContactList
 * @author Paul Maddox <paul.maddox@gmail.com>
 * @copyright Paul Maddox 4 Jan 2010
 */
class ContactList extends Base {
	
	protected $arrContacts;
	
	/*##########################################################################*//**
	 * Finds a contact based on phone number
	 * @param $chrPhoneNumber
	 * @return $objContact;
	 */
	function findByPhoneNumber( $chrPhoneNumber ) {
		
		
		foreach($this->arrContacts as $objContact){
			
			foreach($objContact->getPhoneNumbers() as $chrContactNumber){
				
				# Strip all whitespace and international codes from the numbers
				# before performing any comparison
				$chrPhoneNumber = str_replace(' ', '', $chrPhoneNumber);
				$chrContactNumber = str_replace(' ', '', $chrContactNumber);
				
				# Apply some fuzzy logic, replace 0044 or +44 with 0
				$chrPattern = "#^00[\\d][\\d]#m";
				$chrPhoneNumber = preg_replace($chrPattern, "0", $chrPhoneNumber);
				$chrContactNumber = preg_replace($chrPattern, "0", $chrContactNumber);
				
				$chrPattern = "#^\\+[\\d][\\d]#m";
				$chrPhoneNumber = preg_replace($chrPattern, "0", $chrPhoneNumber);
				$chrContactNumber = preg_replace($chrPattern, "0", $chrContactNumber);
			
				if($chrContactNumber == $chrPhoneNumber){
					return $objContact;
				}

			}

		}
		
		die("Unable to match a contact to phone number: $chrPhoneNumber");
	
	} # end method
	
	/*##########################################################################*//**
	 * Finds a contact based on name
	 * @param $chrName
	 * @return $objContact;
	 */
	function findByName( $chrName ) {
			
		foreach($this->arrContacts as $objContact){
			
			if(strtolower($objContact->getName()) == strtolower($chrName)){
				return $objContact;
			}
	
		}
		
		die("Unable to match a contact to name: $chrName");
	
	} # end method
	
}