<?php
/**
 * This class provides HTTP downloads to a the local filesystem with progress counters
 * It also allows pausing/resuming
 *
 * @package Download
 * @author Paul Maddox <paul.maddox@gmail.com>
 * @copyright Paul Maddox 8 Apr 2010
 */
class Download extends BaseData {

	protected $chrURL;
	protected $chrUsername;
	protected $chrPassword;
	protected $chrTarget;
	protected $intDate;
	protected $intBytesTotal;
	protected $intBytesDownloaded;
	protected $blnCompleted;

	/**
	 * Starts or resumes a download
	 * @return true
	 */
	public function start(  ) {

		# Check if this download already exists - and running?
		display("Finding by URL: {$this->getURL()}");

		display(self::find('chrURL', 'paul'));
exit;
		foreach((array) $arrDownloads as $idDownload){

			$objDownload = new Download($idDownload);
			if(!$objDownload->isCompleted() && !$objDownload->isRunning()){
				display("Restarting existing download...");
				$this->load($idDownload);
				$this->start();
			}
		}

		if(strlen($this->getUsername()) > 0){
			# Authentication is required

			$arrContextOptions = array(
				'http' => array(
					'header' => "Authorization: Basic " . base64_encode("{$this->getUsername()}:{$this->getPassword()}")
				)

			);

			$chrWgetPassword = " --user={$this->getUsername()} --password={$this->getPassword()} ";

			stream_context_set_default($arrContextOptions);

		} else {
			$chrWgetPassword = '';
		}

		# Determin the size of the download
		$arrHeaders = get_headers($this->getURL(), 1);

		if(stristr($arrHeaders[0], '200 OK') === false){
			$objError = new Error("Failed to initiate download ({$arrHeaders[0]})", Error::FATAL);
			exit;
		}

		if(isset($arrHeaders['Content-Length'])){
			$this->setBytesTotal($arrHeaders['Content-Length']);
		}

		$arrFilename = explode('/', $this->getURL());
		$chrFilename = end($arrFilename);

		$chrCommand =  "screen -d -m -s \"$chrFilename\" wget -c $chrWgetPassword --no-check-certificate -O {$this->getTarget()} '{$this->getURL()}'";

		#exec($chrCommand);

		$this->add();

	} # end method

	/**
	 * Pauses a download
	 * @return true
	 */
	public function pause(  ) {

	} # end method

	/*##########################################################################*//**
	 * Gets the completed percentage of the file download
	 * @param
	 * @return $intPercent
	 */
	public function getPercentage(  ) {

		Download::update_status();

		if($this->getBytesTotal() == 0){
			# HTTP headers didn't provide a content-size so we're not sure
			return false;
		}

		$intCurrent = filesize($this->getTarget());
		$intPercent = round(($intCurrent / $this->getBytesTotal()) * 100);

		return $intPercent;

	}

	/**
	 * Checks if a download is currently running
	 * @param
	 * @return $blnRunning
	 */
	public function isRunning(  ) {

		$chrCommand = "ps -ef | grep '{$this->getURL()}'";

		if(exec($chrCommand)){
			return true;
		} else {
			return false;
		}

	} # end method

	/*##########################################################################*//**
	 * Updates the status of all downloads
	 * @param
	 * @return true
	 */
	public static function check_completed() {

		$arrDownloads = Download::find_by_completed(false);

		foreach($arrDownloads as $idDownload){

			$objDownload = new Download($idDownload);

			# If the target file doesn't exist anymore, mark it as completed
			if(!file_exists($objDownload->getTarget())){
				$objDownload->setCompleted(true);
				$objDownload->update();
				continue;
			}

			# The downloaded filesize matches (or is greater than) the reported
			# HTTP header download size
			if(filesize($objDownload->getTarget()) >= $objDownload->getBytesTotal()){
				$objDownload->setCompleted(true);
				$objDownload->update();
				continue;
			}

		}

		return true;

	}




}






















































































