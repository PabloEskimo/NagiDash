<?php
/**
 * This class provides persistant storage for which oncall user is assigned to which calendar
 *
 * @package OncallCache
 * @author Paul Maddox <paul.maddox@gmail.com>
 * @copyright Paul Maddox 19 Jul 2010
 */
class OncallCache extends BaseData { 

	protected $idOncallCache;
	protected $chrCalendar;
	protected $idUser;
	protected $intUpdated;
	protected $blnSMS;

	/**
	 * Updates the cached oncallcache users for each of the calendars
	 * @param params
	 * @return return
	 */
	public static function update_cache( ) {
				
		# First build up an array of the current oncall engineers
		$arrBefore = array();
		foreach(Config::get('calendars') as $chrName => $chrURL){
			$arrCache = OncallCache::find_by_calendar($chrName);
		
			foreach($arrCache as $idCache){
				$objCache = new OncallCache($idCache);
				$arrBefore[$chrName] = $objCache->getUser();
			}
			
		}

		# Now update them
		foreach((Array) Config::get('calendars') as $chrCalendar => $chrURL){
			
			$objCalendar = new GoogleCalendar($chrURL);
			$arrOncall = $objCalendar->getOncallUser(); 

			
			foreach($arrOncall as $idUser){
					
				$arrCache = OncallCache::find_by_calendar($chrCalendar);
				if(sizeof($arrCache) > 0){
					# A cached entry for this calendar already exists
					$objCache = new OncallCache($arrCache[0]);
					$objCache->setUser($idUser);
					$objCache->setUpdated(time());
					$objCache->update();
					
				} else {
					$objCache = new OncallCache();
					$objCache->setCalendar($chrCalendar);
					$objCache->setUser($idUser);
					$objCache->setUpdated(time());
					$objCache->add();
	
				}
				
			}
			
		}
	
		# Now generate that same array again, and see if anything's changed.
		# If it has - SMS the engineer letting them know they're oncall
		$arrAfter = array();
		foreach(Config::get('calendars') as $chrName => $chrURL){
			
			$arrCache = OncallCache::find_by_calendar($chrName);
		
			foreach($arrCache as $idCache){
				$objCache = new OncallCache($idCache);
				$arrAfter[$chrName] = $objCache->getUser();
			}
			
		}
		
		foreach($arrBefore as $chrName => $idBefore){
			
			if(date('l') == "Saturday" || date('l') == "Sunday"){
					# But don't SMS them at the weekend - that's just cruel!
					# continue;
			}
			
			if($idBefore != $arrAfter[$chrName]){
				# Oncall User has changed!
				
				$objUser = new User($arrAfter[$chrName]);
				$objSMS = new SMS();
				$objSMS->addRecipient($objUser->getPhoneNumber());
				$objSMS->setMessage("Congratulations, you're now oncall");
				$objSMS->send();
				
			}	
			
		}
		
		return true;
			
	} # end method
	
	
	/**
	 * Gets a URL for embedding all of the calendars on a single page
	 * @param 
	 * @return true
	 */
	public static function get_embedded_url(  ) {

		$chrEmbedded = 'http://www.google.com/calendar/embed?';
		
		foreach(Config::get('calendars') as $chrName => $chrURL){
			
			$chrEmbedded .= "src=$chrURL&";
			
		}
		
		$chrEmbedded = trim($chrEmbedded, '&');
			
		return $chrEmbedded;
			
	} # end method
	
	
	
	
}